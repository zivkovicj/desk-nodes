
Re-watch the video that included other tips for finding Dev jobs.

I think it's ready for the next push.  But mess around with the logging and sessions to check first.

REmove unused lines from server file

don't offer log out button on login page

Put demo username and pass on that landing page
Header on Landing Page
Route to "home" after logging-in.

Finish reading TutorialsPoint

Make page header

TutorialsPoint warned not to use MemoryStore during production to store session information.  Learn what should be used in production.

Tests for sessions?

Put logout button in header

Documentation

Ask if anybody is willing to swap code reviews

Complete server tests
Organize students, scores, and topics in their own router page
Re-run tests after setting up router folders

Establish a way to reset the production database

Write unit tests for database actions

I think that I may have fixed the problem where many scores don't show up when the user relods the scoresheet.  But pay attention to whether it acutally fixed.
Consider looking again at some async and await articles for a more efficient way to do this.  Or asking on StackOverflow.
https://zellwk.com/blog/async-await-express/

Notes about why some students ended up with the new topic.  Or in groups of one.

All the "link" partials could be combined into a single partial that takes a parameter

Attendance-marking page before DC results.

Re-route upon deleting a student

Don't allow scores below 0 or over 100

Finish topic routes
  Post
  Put
  Delete
  Create scores upon creating a topic




***********************************
FAR FUTURE
***********************************

  Give user an announcement upon adding, updating, or deleting a student
  Don't assign consultants who scored above 90 unless we must
  Maybe one more pass for consultants who scored 100
  
  If this ever gets used in a classroom again, make sure to implement a system to keep track of which students need a turn to be consultant.


***********************************
ALREADY ACCOMPLISHED
***********************************

✓ Place students whose scores were too high to place them.
✓ Add more students and topics so that the algo has more to work with
✓ Separate Scoresheet Button and Desk Constultants Button

Consultants algo: 
  Choose topics
    ✓In order of topic priority
    ✓Choose enough consultants for each topic to match need / 4
    ✓ Allocate remaining students into those groups
    ✓ Allocate the students more evenly (maybe use groups as the outer loop.  Repeat the process four times.)
  Dry the code that fetches all the data
  ✓ Display results
    ✓ Arrange students into clusters of four
    ✓ Highlight consultant student

Finish student routes
  ✓ Post
  ✓ Put
  ✓ Delete

✓ Put a little more work into the appearance of the score table

✓ Scoresheet is editable to change the scores

✓ Connect desk-consultants page to database scores instead of fake scores.

✓  Bug: Can't set scores to 0 or blank (Because it requires an integer)

✓ Link to homepage from
  ✓ scores
  ✓ DC
  ✓ students view




